-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Galerie.Object.Artist exposing (..)

import Galerie.Enum.Artwork_select_column
import Galerie.InputObject
import Galerie.Interface
import Galerie.Object
import Galerie.Scalar
import Galerie.ScalarCodecs
import Galerie.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


type alias ArtworksOptionalArguments =
    { distinct_on : OptionalArgument (List Galerie.Enum.Artwork_select_column.Artwork_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Galerie.InputObject.Artwork_order_by)
    , where_ : OptionalArgument Galerie.InputObject.Artwork_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
artworks : (ArtworksOptionalArguments -> ArtworksOptionalArguments) -> SelectionSet decodesTo Galerie.Object.Artwork -> SelectionSet (List decodesTo) Galerie.Object.Artist
artworks fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Galerie.Enum.Artwork_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Galerie.InputObject.encodeArtwork_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Galerie.InputObject.encodeArtwork_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "artworks" optionalArgs object_ (identity >> Decode.list)


type alias ArtworksAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Galerie.Enum.Artwork_select_column.Artwork_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Galerie.InputObject.Artwork_order_by)
    , where_ : OptionalArgument Galerie.InputObject.Artwork_bool_exp
    }


{-| An aggregated array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
artworks_aggregate : (ArtworksAggregateOptionalArguments -> ArtworksAggregateOptionalArguments) -> SelectionSet decodesTo Galerie.Object.Artwork_aggregate -> SelectionSet decodesTo Galerie.Object.Artist
artworks_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Galerie.Enum.Artwork_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Galerie.InputObject.encodeArtwork_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Galerie.InputObject.encodeArtwork_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "artworks_aggregate" optionalArgs object_ identity


created_at : SelectionSet Galerie.ScalarCodecs.Timestamptz Galerie.Object.Artist
created_at =
    Object.selectionForField "ScalarCodecs.Timestamptz" "created_at" [] (Galerie.ScalarCodecs.codecs |> Galerie.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)


first_name : SelectionSet Galerie.ScalarCodecs.Name Galerie.Object.Artist
first_name =
    Object.selectionForField "ScalarCodecs.Name" "first_name" [] (Galerie.ScalarCodecs.codecs |> Galerie.Scalar.unwrapCodecs |> .codecName |> .decoder)


id : SelectionSet Galerie.ScalarCodecs.Uuid Galerie.Object.Artist
id =
    Object.selectionForField "ScalarCodecs.Uuid" "id" [] (Galerie.ScalarCodecs.codecs |> Galerie.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


last_name : SelectionSet Galerie.ScalarCodecs.Name Galerie.Object.Artist
last_name =
    Object.selectionForField "ScalarCodecs.Name" "last_name" [] (Galerie.ScalarCodecs.codecs |> Galerie.Scalar.unwrapCodecs |> .codecName |> .decoder)


nickname : SelectionSet Galerie.ScalarCodecs.Name Galerie.Object.Artist
nickname =
    Object.selectionForField "ScalarCodecs.Name" "nickname" [] (Galerie.ScalarCodecs.codecs |> Galerie.Scalar.unwrapCodecs |> .codecName |> .decoder)


updated_at : SelectionSet Galerie.ScalarCodecs.Timestamptz Galerie.Object.Artist
updated_at =
    Object.selectionForField "ScalarCodecs.Timestamptz" "updated_at" [] (Galerie.ScalarCodecs.codecs |> Galerie.Scalar.unwrapCodecs |> .codecTimestamptz |> .decoder)
