-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Galerie.Subscription exposing (..)

import Galerie.Enum.Artist_select_column
import Galerie.Enum.Artwork_select_column
import Galerie.InputObject
import Galerie.Interface
import Galerie.Object
import Galerie.Scalar
import Galerie.ScalarCodecs
import Galerie.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias ArtistOptionalArguments =
    { distinct_on : OptionalArgument (List Galerie.Enum.Artist_select_column.Artist_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Galerie.InputObject.Artist_order_by)
    , where_ : OptionalArgument Galerie.InputObject.Artist_bool_exp
    }


{-| fetch data from the table: "artist"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
artist : (ArtistOptionalArguments -> ArtistOptionalArguments) -> SelectionSet decodesTo Galerie.Object.Artist -> SelectionSet (List decodesTo) RootSubscription
artist fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Galerie.Enum.Artist_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Galerie.InputObject.encodeArtist_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Galerie.InputObject.encodeArtist_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "artist" optionalArgs object_ (identity >> Decode.list)


type alias ArtistAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Galerie.Enum.Artist_select_column.Artist_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Galerie.InputObject.Artist_order_by)
    , where_ : OptionalArgument Galerie.InputObject.Artist_bool_exp
    }


{-| fetch aggregated fields from the table: "artist"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
artist_aggregate : (ArtistAggregateOptionalArguments -> ArtistAggregateOptionalArguments) -> SelectionSet decodesTo Galerie.Object.Artist_aggregate -> SelectionSet decodesTo RootSubscription
artist_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Galerie.Enum.Artist_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Galerie.InputObject.encodeArtist_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Galerie.InputObject.encodeArtist_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "artist_aggregate" optionalArgs object_ identity


type alias ArtistByPkRequiredArguments =
    { id : Galerie.ScalarCodecs.Uuid }


{-| fetch data from the table: "artist" using primary key columns
-}
artist_by_pk : ArtistByPkRequiredArguments -> SelectionSet decodesTo Galerie.Object.Artist -> SelectionSet (Maybe decodesTo) RootSubscription
artist_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "artist_by_pk" [ Argument.required "id" requiredArgs.id (Galerie.ScalarCodecs.codecs |> Galerie.Scalar.unwrapEncoder .codecUuid) ] object_ (identity >> Decode.nullable)


type alias ArtworkOptionalArguments =
    { distinct_on : OptionalArgument (List Galerie.Enum.Artwork_select_column.Artwork_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Galerie.InputObject.Artwork_order_by)
    , where_ : OptionalArgument Galerie.InputObject.Artwork_bool_exp
    }


{-| fetch data from the table: "artwork"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
artwork : (ArtworkOptionalArguments -> ArtworkOptionalArguments) -> SelectionSet decodesTo Galerie.Object.Artwork -> SelectionSet (List decodesTo) RootSubscription
artwork fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Galerie.Enum.Artwork_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Galerie.InputObject.encodeArtwork_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Galerie.InputObject.encodeArtwork_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "artwork" optionalArgs object_ (identity >> Decode.list)


type alias ArtworkAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Galerie.Enum.Artwork_select_column.Artwork_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Galerie.InputObject.Artwork_order_by)
    , where_ : OptionalArgument Galerie.InputObject.Artwork_bool_exp
    }


{-| fetch aggregated fields from the table: "artwork"

  - distinct\_on - distinct select on columns
  - limit - limit the nuber of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
artwork_aggregate : (ArtworkAggregateOptionalArguments -> ArtworkAggregateOptionalArguments) -> SelectionSet decodesTo Galerie.Object.Artwork_aggregate -> SelectionSet decodesTo RootSubscription
artwork_aggregate fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs =
            [ Argument.optional "distinct_on" filledInOptionals.distinct_on (Encode.enum Galerie.Enum.Artwork_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals.limit Encode.int, Argument.optional "offset" filledInOptionals.offset Encode.int, Argument.optional "order_by" filledInOptionals.order_by (Galerie.InputObject.encodeArtwork_order_by |> Encode.list), Argument.optional "where" filledInOptionals.where_ Galerie.InputObject.encodeArtwork_bool_exp ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "artwork_aggregate" optionalArgs object_ identity


type alias ArtworkByPkRequiredArguments =
    { id : Galerie.ScalarCodecs.Uuid }


{-| fetch data from the table: "artwork" using primary key columns
-}
artwork_by_pk : ArtworkByPkRequiredArguments -> SelectionSet decodesTo Galerie.Object.Artwork -> SelectionSet (Maybe decodesTo) RootSubscription
artwork_by_pk requiredArgs object_ =
    Object.selectionForCompositeField "artwork_by_pk" [ Argument.required "id" requiredArgs.id (Galerie.ScalarCodecs.codecs |> Galerie.Scalar.unwrapEncoder .codecUuid) ] object_ (identity >> Decode.nullable)
