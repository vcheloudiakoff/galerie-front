-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Galerie.Mutation exposing (..)

import Galerie.InputObject
import Galerie.Interface
import Galerie.Object
import Galerie.Scalar
import Galerie.ScalarCodecs
import Galerie.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias DeleteArtistRequiredArguments =
    { where_ : Galerie.InputObject.Artist_bool_exp }


{-| delete data from the table: "artist"

  - where\_ - filter the rows which have to be deleted

-}
delete_artist : DeleteArtistRequiredArguments -> SelectionSet decodesTo Galerie.Object.Artist_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
delete_artist requiredArgs object_ =
    Object.selectionForCompositeField "delete_artist" [ Argument.required "where" requiredArgs.where_ Galerie.InputObject.encodeArtist_bool_exp ] object_ (identity >> Decode.nullable)


type alias DeleteArtworkRequiredArguments =
    { where_ : Galerie.InputObject.Artwork_bool_exp }


{-| delete data from the table: "artwork"

  - where\_ - filter the rows which have to be deleted

-}
delete_artwork : DeleteArtworkRequiredArguments -> SelectionSet decodesTo Galerie.Object.Artwork_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
delete_artwork requiredArgs object_ =
    Object.selectionForCompositeField "delete_artwork" [ Argument.required "where" requiredArgs.where_ Galerie.InputObject.encodeArtwork_bool_exp ] object_ (identity >> Decode.nullable)


type alias InsertArtistOptionalArguments =
    { on_conflict : OptionalArgument Galerie.InputObject.Artist_on_conflict }


type alias InsertArtistRequiredArguments =
    { objects : List Galerie.InputObject.Artist_insert_input }


{-| insert data into the table: "artist"

  - objects - the rows to be inserted
  - on\_conflict - on conflict condition

-}
insert_artist : (InsertArtistOptionalArguments -> InsertArtistOptionalArguments) -> InsertArtistRequiredArguments -> SelectionSet decodesTo Galerie.Object.Artist_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
insert_artist fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { on_conflict = Absent }

        optionalArgs =
            [ Argument.optional "on_conflict" filledInOptionals.on_conflict Galerie.InputObject.encodeArtist_on_conflict ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "insert_artist" (optionalArgs ++ [ Argument.required "objects" requiredArgs.objects (Galerie.InputObject.encodeArtist_insert_input |> Encode.list) ]) object_ (identity >> Decode.nullable)


type alias InsertArtworkOptionalArguments =
    { on_conflict : OptionalArgument Galerie.InputObject.Artwork_on_conflict }


type alias InsertArtworkRequiredArguments =
    { objects : List Galerie.InputObject.Artwork_insert_input }


{-| insert data into the table: "artwork"

  - objects - the rows to be inserted
  - on\_conflict - on conflict condition

-}
insert_artwork : (InsertArtworkOptionalArguments -> InsertArtworkOptionalArguments) -> InsertArtworkRequiredArguments -> SelectionSet decodesTo Galerie.Object.Artwork_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
insert_artwork fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { on_conflict = Absent }

        optionalArgs =
            [ Argument.optional "on_conflict" filledInOptionals.on_conflict Galerie.InputObject.encodeArtwork_on_conflict ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "insert_artwork" (optionalArgs ++ [ Argument.required "objects" requiredArgs.objects (Galerie.InputObject.encodeArtwork_insert_input |> Encode.list) ]) object_ (identity >> Decode.nullable)


type alias UpdateArtistOptionalArguments =
    { set_ : OptionalArgument Galerie.InputObject.Artist_set_input }


type alias UpdateArtistRequiredArguments =
    { where_ : Galerie.InputObject.Artist_bool_exp }


{-| update data of the table: "artist"

  - set\_ - sets the columns of the filtered rows to the given values
  - where\_ - filter the rows which have to be updated

-}
update_artist : (UpdateArtistOptionalArguments -> UpdateArtistOptionalArguments) -> UpdateArtistRequiredArguments -> SelectionSet decodesTo Galerie.Object.Artist_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
update_artist fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { set_ = Absent }

        optionalArgs =
            [ Argument.optional "_set" filledInOptionals.set_ Galerie.InputObject.encodeArtist_set_input ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_artist" (optionalArgs ++ [ Argument.required "where" requiredArgs.where_ Galerie.InputObject.encodeArtist_bool_exp ]) object_ (identity >> Decode.nullable)


type alias UpdateArtworkOptionalArguments =
    { inc_ : OptionalArgument Galerie.InputObject.Artwork_inc_input
    , set_ : OptionalArgument Galerie.InputObject.Artwork_set_input
    }


type alias UpdateArtworkRequiredArguments =
    { where_ : Galerie.InputObject.Artwork_bool_exp }


{-| update data of the table: "artwork"

  - inc\_ - increments the integer columns with given value of the filtered values
  - set\_ - sets the columns of the filtered rows to the given values
  - where\_ - filter the rows which have to be updated

-}
update_artwork : (UpdateArtworkOptionalArguments -> UpdateArtworkOptionalArguments) -> UpdateArtworkRequiredArguments -> SelectionSet decodesTo Galerie.Object.Artwork_mutation_response -> SelectionSet (Maybe decodesTo) RootMutation
update_artwork fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { inc_ = Absent, set_ = Absent }

        optionalArgs =
            [ Argument.optional "_inc" filledInOptionals.inc_ Galerie.InputObject.encodeArtwork_inc_input, Argument.optional "_set" filledInOptionals.set_ Galerie.InputObject.encodeArtwork_set_input ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "update_artwork" (optionalArgs ++ [ Argument.required "where" requiredArgs.where_ Galerie.InputObject.encodeArtwork_bool_exp ]) object_ (identity >> Decode.nullable)
